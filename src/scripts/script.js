"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(e){return void 0===e?"undefined":_typeof2(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":_typeof2(e)};!function(e,t){"function"==typeof define&&define.amd?define(["jquery"],function(n){return t(n,e,e.document,e.Math)}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&exports?module.exports=t(require("jquery"),e,e.document,e.Math):t(jQuery,e,e.document,e.Math)}("undefined"!=typeof window?window:void 0,function(e,t,n,o,a){var i="fullpage-wrapper",s="."+i,r="fp-responsive",l="fp-notransition",c="fp-destroyed",u="fp-enabled",d="fp-viewing",f="active",h="."+f,v="fp-completely",p="."+v,m="fp-section",g="."+m,y=g+h,k=g+":first",w=g+":last",b="fp-tableCell",S="."+b,C="fp-auto-height",x="fp-normal-scroll",M="fp-nav",T="#"+M,A="fp-tooltip",I="."+A,E="fp-show-active",P="fp-slide",L="."+P,O=L+h,R="fp-slides",z="."+R,F="fp-slidesContainer",B="."+F,D="fp-table",j="fp-slidesNav",H="."+j,V=H+" a",_=".fp-controlArrow",q="fp-prev",W="fp-controlArrow "+q,$=_+("."+q),G="fp-controlArrow fp-next",N=_+".fp-next",Y=e(t),U=e(n);e.fn.fullpage=function(X){function K(t,n){t||ut(0),ht("autoScrolling",t,n);var o=e(y);X.autoScrolling&&!X.scrollBar?(mt.css({overflow:"hidden",height:"100%"}),Z(qt.recordHistory,"internal"),Tt.css({"-ms-touch-action":"none","touch-action":"none"}),o.length&&ut(o.position().top)):(mt.css({overflow:"visible",height:"initial"}),Z(!1,"internal"),Tt.css({"-ms-touch-action":"","touch-action":""}),o.length&&mt.scrollTop(o.position().top))}function Z(e,t){ht("recordHistory",e,t)}function Q(e,t){ht("scrollingSpeed",e,t)}function J(e,t){ht("fitToSection",e,t)}function ee(e){e?(!function(){var e,o="";t.addEventListener?e="addEventListener":(e="attachEvent",o="on");var i="onwheel"in n.createElement("div")?"wheel":n.onmousewheel!==a?"mousewheel":"DOMMouseScroll";"DOMMouseScroll"==i?n[e](o+"MozMousePixelScroll",we,!1):n[e](o+i,we,!1)}(),Tt.on("mousedown",De).on("mouseup",je)):(n.addEventListener?(n.removeEventListener("mousewheel",we,!1),n.removeEventListener("wheel",we,!1),n.removeEventListener("MozMousePixelScroll",we,!1)):n.detachEvent("onmousewheel",we),Tt.off("mousedown",De).off("mouseup",je))}function te(t,n){void 0!==n?(n=n.replace(/ /g,"").split(","),e.each(n,function(e,n){ft(t,n,"m")})):(ft(t,"all","m"),t?(ee(!0),(xt||Mt)&&(X.autoScrolling&&gt.off(_t.touchmove).on(_t.touchmove,pe),e(s).off(_t.touchstart).on(_t.touchstart,ye).off(_t.touchmove).on(_t.touchmove,me))):(ee(!1),(xt||Mt)&&(X.autoScrolling&&gt.off(_t.touchmove),e(s).off(_t.touchstart).off(_t.touchmove))))}function ne(t,n){void 0!==n?(n=n.replace(/ /g,"").split(","),e.each(n,function(e,n){ft(t,n,"k")})):(ft(t,"all","k"),X.keyboardScrolling=t)}function oe(){var t=e(y).prev(g);t.length||!X.loopTop&&!X.continuousVertical||(t=e(g).last()),t.length&&Ce(t,null,!0)}function ae(){var t=e(y).next(g);t.length||!X.loopBottom&&!X.continuousVertical||(t=e(g).first()),t.length&&Ce(t,null,!1)}function ie(e,t){Q(0,"internal"),se(e,t),Q(qt.scrollingSpeed,"internal")}function se(e,t){var n=tt(e);void 0!==t?nt(e,t):n.length>0&&Ce(n)}function re(e){be("right",e)}function le(e){be("left",e)}function ce(t){if(!Tt.hasClass(c)){It=!0,At=Y.height(),e(g).each(function(){var t=e(this).find(z),n=e(this).find(L);X.verticalCentered&&e(this).find(S).css("height",Je(e(this))+"px"),e(this).css("height",At+"px"),n.length>1&&$e(t,t.find(O))}),X.scrollOverflow&&Rt.createScrollBarForAll();var n=e(y).index(g);n&&ie(n+1),It=!1,e.isFunction(X.afterResize)&&t&&X.afterResize.call(Tt),e.isFunction(X.afterReBuild)&&!t&&X.afterReBuild.call(Tt)}}function ue(t){var n=gt.hasClass(r);t?n||(K(!1,"internal"),J(!1,"internal"),e(T).hide(),gt.addClass(r),e.isFunction(X.afterResponsive)&&X.afterResponsive.call(Tt,t)):n&&(K(qt.autoScrolling,"internal"),J(qt.autoScrolling,"internal"),e(T).show(),gt.removeClass(r),e.isFunction(X.afterResponsive)&&X.afterResponsive.call(Tt,t))}function de(){var t=e(y);t.addClass(v),Te(t),Ae(t),X.scrollOverflow&&X.scrollOverflowHandler.afterLoad(),function(){var e=tt(Re().section);return!e.length||e.length&&e.index()===St.index()}()&&e.isFunction(X.afterLoad)&&X.afterLoad.call(t,t.data("anchor"),t.index(g)+1),e.isFunction(X.afterRender)&&X.afterRender.call(Tt)}function fe(){var t;if(!X.autoScrolling||X.scrollBar){var o=Y.scrollTop(),a=function(e){var t=e>$t?"down":"up";return $t=e,Kt=e,t}(o),i=0,s=o+Y.height()/2,r=gt.height()-Y.height()===o,l=n.querySelectorAll(g);if(r)i=l.length-1;else if(o)for(var c=0;c<l.length;++c){l[c].offsetTop<=s&&(i=c)}else i=0;if(function(t){var n=e(y).position().top,o=n+Y.height();if("up"==t)return o>=Y.scrollTop()+Y.height();return n<=Y.scrollTop()}(a)&&(e(y).hasClass(v)||e(y).addClass(v).siblings().removeClass(v)),!(t=e(l).eq(i)).hasClass(f)){Wt=!0;var u,d,h=e(y),p=h.index(g)+1,m=Ze(t),k=t.data("anchor"),w=t.index(g)+1,b=t.find(O);b.length&&(d=b.data("anchor"),u=b.index()),Pt&&(t.addClass(f).siblings().removeClass(f),e.isFunction(X.onLeave)&&X.onLeave.call(h,p,w,m),e.isFunction(X.afterLoad)&&X.afterLoad.call(t,k,w),Ee(h),Te(t),Ae(t),Ke(k,w-1),X.anchors.length&&(kt=k),at(u,d,k,w)),clearTimeout(Dt),Dt=setTimeout(function(){Wt=!1},100)}X.fitToSection&&(clearTimeout(jt),jt=setTimeout(function(){X.fitToSection&&e(y).outerHeight()<=At&&he()},X.fitToSectionDelay))}}function he(){Pt&&(It=!0,Ce(e(y)),It=!1)}function ve(t){if(Ot.m[t]){var n="down"===t?ae:oe;if(X.scrollOverflow){var o=X.scrollOverflowHandler.scrollable(e(y)),a="down"===t?"bottom":"top";if(o.length>0){if(!X.scrollOverflowHandler.isScrolled(a,o))return!0;n()}else n()}else n()}}function pe(e){var t=e.originalEvent;X.autoScrolling&&ge(t)&&e.preventDefault()}function me(t){var n=t.originalEvent,a=e(n.target).closest(g);if(ge(n)){X.autoScrolling&&t.preventDefault();var i=lt(n);Yt=i.y,Ut=i.x,a.find(z).length&&o.abs(Nt-Ut)>o.abs(Gt-Yt)?!Ct&&o.abs(Nt-Ut)>Y.outerWidth()/100*X.touchSensitivity&&(Nt>Ut?Ot.m.right&&re(a):Ot.m.left&&le(a)):X.autoScrolling&&Pt&&o.abs(Gt-Yt)>Y.height()/100*X.touchSensitivity&&(Gt>Yt?ve("down"):Yt>Gt&&ve("up"))}}function ge(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function ye(e){var t=e.originalEvent;if(X.fitToSection&&mt.stop(),ge(t)){var n=lt(t);Gt=n.y,Nt=n.x}}function ke(e,t){for(var n=0,a=e.slice(o.max(e.length-t,1)),i=0;i<a.length;i++)n+=a[i];return o.ceil(n/t)}function we(n){var a=(new Date).getTime(),i=e(p).hasClass(x);if(X.autoScrolling&&!bt&&!i){var s=(n=n||t.event).wheelDelta||-n.deltaY||-n.detail,r=o.max(-1,o.min(1,s)),l=void 0!==n.wheelDeltaX||void 0!==n.deltaX,c=o.abs(n.wheelDeltaX)<o.abs(n.wheelDelta)||o.abs(n.deltaX)<o.abs(n.deltaY)||!l;Lt.length>149&&Lt.shift(),Lt.push(o.abs(s)),X.scrollBar&&(n.preventDefault?n.preventDefault():n.returnValue=!1);var u=a-Xt;if(Xt=a,u>200&&(Lt=[]),Pt){ke(Lt,10)>=ke(Lt,70)&&c&&ve(r<0?"down":"up")}return!1}X.fitToSection&&mt.stop()}function be(t,n){var o=(void 0===n?e(y):n).find(z),a=o.find(L).length;if(!(!o.length||Ct||a<2)){var i=o.find(O),s=null;if(!(s="left"===t?i.prev(L):i.next(L)).length){if(!X.loopHorizontal)return;s="left"===t?i.siblings(":last"):i.siblings(":first")}Ct=!0,$e(o,s,t)}}function Se(){e(O).each(function(){ct(e(this),"internal")})}function Ce(t,n,a){if(void 0!==t){var i,r,l={element:t,callback:n,isMovementUp:a,dtop:function(e){var t=e.position(),n=t.top,o=t.top>Kt,a=n-At+e.outerHeight(),i=X.bigSectionsDestination;return e.outerHeight()>At?(o||i)&&"bottom"!==i||(n=a):(o||It&&e.is(":last-child"))&&(n=a),Kt=n,n}(t),yMovement:Ze(t),anchorLink:t.data("anchor"),sectionIndex:t.index(g),activeSlide:t.find(O),activeSection:e(y),leavingSection:e(y).index(g)+1,localIsResizing:It};l.activeSection.is(t)&&!It||X.scrollBar&&Y.scrollTop()===l.dtop&&!t.hasClass(C)||(l.activeSlide.length&&(i=l.activeSlide.data("anchor"),r=l.activeSlide.index()),e.isFunction(X.onLeave)&&!l.localIsResizing&&!1===X.onLeave.call(l.activeSection,l.leavingSection,l.sectionIndex+1,l.yMovement)||(X.autoScrolling&&X.continuousVertical&&void 0!==l.isMovementUp&&(!l.isMovementUp&&"up"==l.yMovement||l.isMovementUp&&"down"==l.yMovement)&&(l=function(t){t.isMovementUp?e(y).before(t.activeSection.nextAll(g)):e(y).after(t.activeSection.prevAll(g).get().reverse());return ut(e(y).position().top),Se(),t.wrapAroundElements=t.activeSection,t.dtop=t.element.position().top,t.yMovement=Ze(t.element),t.leavingSection=t.activeSection.index(g)+1,t.sectionIndex=t.element.index(g),t}(l)),l.localIsResizing||Ee(l.activeSection),X.scrollOverflow&&X.scrollOverflowHandler.beforeLeave(),t.addClass(f).siblings().removeClass(f),Te(t),X.scrollOverflow&&X.scrollOverflowHandler.onLeave(),Pt=!1,at(r,i,l.anchorLink,l.sectionIndex),function(t){if(X.css3&&X.autoScrolling&&!X.scrollBar){et("translate3d(0px, -"+o.round(t.dtop)+"px, 0px)",!0),X.scrollingSpeed?(clearTimeout(Ft),Ft=setTimeout(function(){xe(t)},X.scrollingSpeed)):xe(t)}else{var n=function(e){var t={};X.autoScrolling&&!X.scrollBar?(t.options={top:-e.dtop},t.element=s):(t.options={scrollTop:e.dtop},t.element="html, body");return t}(t);e(n.element).animate(n.options,X.scrollingSpeed,X.easing).promise().done(function(){X.scrollBar?setTimeout(function(){xe(t)},30):xe(t)})}}(l),kt=l.anchorLink,Ke(l.anchorLink,l.sectionIndex)))}}function xe(t){!function(t){t.wrapAroundElements&&t.wrapAroundElements.length&&(t.isMovementUp?e(k).before(t.wrapAroundElements):e(w).after(t.wrapAroundElements),ut(e(y).position().top),Se())}(t),e.isFunction(X.afterLoad)&&!t.localIsResizing&&X.afterLoad.call(t.element,t.anchorLink,t.sectionIndex+1),X.scrollOverflow&&X.scrollOverflowHandler.afterLoad(),t.localIsResizing||Ae(t.element),t.element.addClass(v).siblings().removeClass(v),Pt=!0,e.isFunction(t.callback)&&t.callback.call(this)}function Me(e,t){e.attr(t,e.data(t)).removeAttr("data-"+t)}function Te(t){if(X.lazyLoading){var n;Pe(t).find("img[data-src], img[data-srcset], source[data-src], video[data-src], audio[data-src], iframe[data-src]").each(function(){if(n=e(this),e.each(["src","srcset"],function(e,t){var o=n.attr("data-"+t);void 0!==o&&o&&Me(n,t)}),n.is("source")){var t=n.closest("video").length?"video":"audio";n.closest(t).get(0).load()}})}}function Ae(t){var n=Pe(t);n.find("video, audio").each(function(){var t=e(this).get(0);t.hasAttribute("data-autoplay")&&"function"==typeof t.play&&t.play()}),n.find('iframe[src*="youtube.com/embed/"]').each(function(){var t=e(this).get(0);t.hasAttribute("data-autoplay")&&Ie(t),t.onload=function(){t.hasAttribute("data-autoplay")&&Ie(t)}})}function Ie(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function Ee(t){var n=Pe(t);n.find("video, audio").each(function(){var t=e(this).get(0);t.hasAttribute("data-keepplaying")||"function"!=typeof t.pause||t.pause()}),n.find('iframe[src*="youtube.com/embed/"]').each(function(){var t=e(this).get(0);/youtube\.com\/embed\//.test(e(this).attr("src"))&&!t.hasAttribute("data-keepplaying")&&e(this).get(0).contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function Pe(t){var n=t.find(O);return n.length&&(t=e(n)),t}function Le(){var e=Re(),t=e.section,n=e.slide;t&&(X.animateAnchor?nt(t,n):ie(t,n))}function Oe(){if(!Wt&&!X.lockAnchors){var e=Re(),t=e.section,n=e.slide,o=void 0===kt,a=void 0===kt&&void 0===n&&!Ct;t.length&&(t&&t!==kt&&!o||a||!Ct&&wt!=n)&&nt(t,n)}}function Re(){var e=t.location.hash,n=e.replace("#","").split("/"),o=e.indexOf("#/")>-1;return{section:o?"/"+n[1]:decodeURIComponent(n[0]),slide:o?decodeURIComponent(n[2]):decodeURIComponent(n[1])}}function ze(t){clearTimeout(Ht);var n=e(":focus");if(!n.is("textarea")&&!n.is("input")&&!n.is("select")&&"true"!==n.attr("contentEditable")&&""!==n.attr("contentEditable")&&X.keyboardScrolling&&X.autoScrolling){var o=t.which;e.inArray(o,[40,38,32,33,34])>-1&&t.preventDefault(),bt=t.ctrlKey,Ht=setTimeout(function(){!function(t){var n=t.shiftKey;if(!Pt&&[37,39].indexOf(t.which)<0)return;switch(t.which){case 38:case 33:Ot.k.up&&oe();break;case 32:if(n&&Ot.k.up){oe();break}case 40:case 34:Ot.k.down&&ae();break;case 36:Ot.k.up&&se(1);break;case 35:Ot.k.down&&se(e(g).length);break;case 37:Ot.k.left&&le();break;case 39:Ot.k.right&&re();break;default:;}}(t)},150)}}function Fe(){e(this).prev().trigger("click")}function Be(e){Et&&(bt=e.ctrlKey)}function De(e){2==e.which&&(Zt=e.pageY,Tt.on("mousemove",We))}function je(e){2==e.which&&Tt.off("mousemove")}function He(){var t=e(this).closest(g);e(this).hasClass(q)?Ot.m.left&&le(t):Ot.m.right&&re(t)}function Ve(){Et=!1,bt=!1}function _e(t){t.preventDefault();var n=e(this).parent().index();Ce(e(g).eq(n))}function qe(t){t.preventDefault();var n=e(this).closest(g).find(z);$e(n,n.find(L).eq(e(this).closest("li").index()))}function We(e){Pt&&(e.pageY<Zt&&Ot.m.up?oe():e.pageY>Zt&&Ot.m.down&&ae()),Zt=e.pageY}function $e(t,n,a){var i=t.closest(g),s={slides:t,destiny:n,direction:a,destinyPos:n.position(),slideIndex:n.index(),section:i,sectionIndex:i.index(g),anchorLink:i.data("anchor"),slidesNav:i.find(H),slideAnchor:st(n),prevSlide:i.find(O),prevSlideIndex:i.find(O).index(),localIsResizing:It};s.xMovement=function(e,t){if(e==t)return"none";if(e>t)return"left";return"right"}(s.prevSlideIndex,s.slideIndex),s.localIsResizing||(Pt=!1),X.onSlideLeave&&!s.localIsResizing&&"none"!==s.xMovement&&e.isFunction(X.onSlideLeave)&&!1===X.onSlideLeave.call(s.prevSlide,s.anchorLink,s.sectionIndex+1,s.prevSlideIndex,s.direction,s.slideIndex)?Ct=!1:(n.addClass(f).siblings().removeClass(f),s.localIsResizing||(Ee(s.prevSlide),Te(n)),!X.loopHorizontal&&X.controlArrows&&(i.find($).toggle(0!==s.slideIndex),i.find(N).toggle(!n.is(":last-child"))),i.hasClass(f)&&!s.localIsResizing&&at(s.slideIndex,s.slideAnchor,s.anchorLink,s.sectionIndex),function(e,t,n){var a=t.destinyPos;if(X.css3){var i="translate3d(-"+o.round(a.left)+"px, 0px, 0px)";Ue(e.find(B)).css(dt(i)),Bt=setTimeout(function(){n&&Ge(t)},X.scrollingSpeed,X.easing)}else e.animate({scrollLeft:o.round(a.left)},X.scrollingSpeed,X.easing,function(){n&&Ge(t)})}(t,s,!0))}function Ge(t){!function(e,t){e.find(h).removeClass(f),e.find("li").eq(t).find("a").addClass(f)}(t.slidesNav,t.slideIndex),t.localIsResizing||(e.isFunction(X.afterSlideLoad)&&X.afterSlideLoad.call(t.destiny,t.anchorLink,t.sectionIndex+1,t.slideAnchor,t.slideIndex),Pt=!0,Ae(t.destiny)),Ct=!1}function Ne(){if(Ye(),xt){var t=e(n.activeElement);if(!t.is("textarea")&&!t.is("input")&&!t.is("select")){var a=Y.height();o.abs(a-Qt)>20*o.max(Qt,a)/100&&(ce(!0),Qt=a)}}else clearTimeout(zt),zt=setTimeout(function(){ce(!0)},350)}function Ye(){var e=X.responsive||X.responsiveWidth,t=X.responsiveHeight,n=e&&Y.outerWidth()<e,o=t&&Y.height()<t;e&&t?ue(n||o):e?ue(n):t&&ue(o)}function Ue(e){var t="all "+X.scrollingSpeed+"ms "+X.easingcss3;return e.removeClass(l),e.css({"-webkit-transition":t,transition:t})}function Xe(e){return e.addClass(l)}function Ke(t,n){!function(t){X.menu&&(e(X.menu).find(h).removeClass(f),e(X.menu).find('[data-menuanchor="'+t+'"]').addClass(f))}(t),function(t,n){X.navigation&&(e(T).find(h).removeClass(f),t?e(T).find('a[href="#'+t+'"]').addClass(f):e(T).find("li").eq(n).find("a").addClass(f))}(t,n)}function Ze(t){var n=e(y).index(g),o=t.index(g);return n==o?"none":n>o?"up":"down"}function Qe(e){e.hasClass(D)||e.addClass(D).wrapInner('<div class="'+b+'" style="height:'+Je(e)+'px;" />')}function Je(e){var t=At;if(X.paddingTop||X.paddingBottom){var n=e;n.hasClass(m)||(n=e.closest(g));var o=parseInt(n.css("padding-top"))+parseInt(n.css("padding-bottom"));t=At-o}return t}function et(e,t){t?Ue(Tt):Xe(Tt),Tt.css(dt(e)),setTimeout(function(){Tt.removeClass(l)},10)}function tt(t){if(!t)return[];var n=Tt.find(g+'[data-anchor="'+t+'"]');return n.length||(n=e(g).eq(t-1)),n}function nt(e,t){var n=tt(e);n.length&&(void 0===t&&(t=0),e===kt||n.hasClass(f)?ot(n,t):Ce(n,function(){ot(n,t)}))}function ot(e,t){if(void 0!==t){var n=e.find(z),o=function(e,t){var n=t.find(z),o=n.find(L+'[data-anchor="'+e+'"]');return o.length||(o=n.find(L).eq(e)),o}(t,e);o.length&&$e(n,o)}}function at(e,t,n,o){var a="";X.anchors.length&&!X.lockAnchors&&(e?(void 0!==n&&(a=n),void 0===t&&(t=e),wt=t,it(a+"/"+t)):void 0!==e?(wt=t,it(n)):it(n)),rt()}function it(e){if(X.recordHistory)location.hash=e;else if(xt||Mt)t.history.replaceState(a,a,"#"+e);else{var n=t.location.href.split("#")[0];t.location.replace(n+"#"+e)}}function st(e){var t=e.data("anchor"),n=e.index();return void 0===t&&(t=n),t}function rt(){var t=e(y),n=t.find(O),o=st(t),a=st(n),i=String(o);n.length&&(i=i+"-"+a),i=i.replace("/","-").replace("#","");var s=new RegExp("\\b\\s?"+d+"-[^\\s]+\\b","g");gt[0].className=gt[0].className.replace(s,""),gt.addClass(d+"-"+i)}function lt(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,Mt&&ge(e)&&X.scrollBar&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function ct(e,t){Q(0,"internal"),void 0!==t&&(It=!0),$e(e.closest(z),e),void 0!==t&&(It=!1),Q(qt.scrollingSpeed,"internal")}function ut(e){var t=o.round(e);if(X.css3&&X.autoScrolling&&!X.scrollBar){et("translate3d(0px, -"+t+"px, 0px)",!1)}else X.autoScrolling&&!X.scrollBar?Tt.css("top",-t):mt.scrollTop(t)}function dt(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function ft(t,n,o){"all"!==n?Ot[o][n]=t:e.each(Object.keys(Ot[o]),function(e,n){Ot[o][n]=t})}function ht(e,t,n){X[e]=t,"internal"!==n&&(qt[e]=t)}function vt(){e("html").hasClass(u)?pt("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(X.continuousVertical&&(X.loopTop||X.loopBottom)&&(X.continuousVertical=!1,pt("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),X.scrollBar&&X.scrollOverflow&&pt("warn","Option `scrollBar` is mutually exclusive with `scrollOverflow`. Sections with scrollOverflow might not work well in Firefox"),!X.continuousVertical||!X.scrollBar&&X.autoScrolling||(X.continuousVertical=!1,pt("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),X.scrollOverflow&&!X.scrollOverflowHandler&&(X.scrollOverflow=!1,pt("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),e.each(["fadingEffect","continuousHorizontal","scrollHorizontally","interlockedSlides","resetSliders","responsiveSlides","offsetSections","dragAndMove","scrollOverflowReset","parallax"],function(e,t){X[t]&&pt("warn","fullpage.js extensions require jquery.fullpage.extensions.min.js file instead of the usual jquery.fullpage.js. Requested: "+t)}),e.each(X.anchors,function(t,n){var o=U.find("[name]").filter(function(){return e(this).attr("name")&&e(this).attr("name").toLowerCase()==n.toLowerCase()}),a=U.find("[id]").filter(function(){return e(this).attr("id")&&e(this).attr("id").toLowerCase()==n.toLowerCase()});(a.length||o.length)&&(pt("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE)."),a.length&&pt("error",'"'+n+'" is is being used by another element `id` property'),o.length&&pt("error",'"'+n+'" is is being used by another element `name` property'))}))}function pt(e,t){console&&console[e]&&console[e]("fullPage: "+t)}if(e("html").hasClass(u))vt();else{var mt=e("html, body"),gt=e("body"),yt=e.fn.fullpage;X=e.extend({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:e.fn.fp_scrolloverflow?e.fn.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,normalScrollElementTouchThreshold:5,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},sectionSelector:".section",slideSelector:".slide",afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},X);var kt,wt,bt,St,Ct=!1,xt=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),Mt="ontouchstart"in t||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,Tt=e(this),At=Y.height(),It=!1,Et=!0,Pt=!0,Lt=[],Ot={};Ot.m={up:!0,down:!0,left:!0,right:!0},Ot.k=e.extend(!0,{},Ot.m);var Rt,zt,Ft,Bt,Dt,jt,Ht,Vt=t.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"},_t={touchmove:"ontouchmove"in t?"touchmove":Vt.move,touchstart:"ontouchstart"in t?"touchstart":Vt.down},qt=e.extend(!0,{},X);vt(),e.extend(e.easing,{easeInOutCubic:function(e,t,n,o,a){return(t/=a/2)<1?o/2*t*t*t+n:o/2*((t-=2)*t*t+2)+n}}),e(this).length&&(yt.version="2.9.5",yt.setAutoScrolling=K,yt.setRecordHistory=Z,yt.setScrollingSpeed=Q,yt.setFitToSection=J,yt.setLockAnchors=function(e){X.lockAnchors=e},yt.setMouseWheelScrolling=ee,yt.setAllowScrolling=te,yt.setKeyboardScrolling=ne,yt.moveSectionUp=oe,yt.moveSectionDown=ae,yt.silentMoveTo=ie,yt.moveTo=se,yt.moveSlideRight=re,yt.moveSlideLeft=le,yt.fitToSection=he,yt.reBuild=ce,yt.setResponsive=ue,yt.destroy=function(t){K(!1,"internal"),te(!1),ne(!1),Tt.addClass(c),clearTimeout(Bt),clearTimeout(Ft),clearTimeout(zt),clearTimeout(Dt),clearTimeout(jt),Y.off("scroll",fe).off("hashchange",Oe).off("resize",Ne),U.off("click touchstart",T+" a").off("mouseenter",T+" li").off("mouseleave",T+" li").off("click touchstart",V).off("mouseover",X.normalScrollElements).off("mouseout",X.normalScrollElements),e(g).off("click touchstart",_),clearTimeout(Bt),clearTimeout(Ft),t&&function(){ut(0),Tt.find("img[data-src], source[data-src], audio[data-src], iframe[data-src]").each(function(){Me(e(this),"src")}),Tt.find("img[data-srcset]").each(function(){Me(e(this),"srcset")}),e(T+", "+H+", "+_).remove(),e(g).css({height:"","background-color":"",padding:""}),e(L).css({width:""}),Tt.css({height:"",position:"","-ms-touch-action":"","touch-action":""}),mt.css({overflow:"",height:""}),e("html").removeClass(u),gt.removeClass(r),e.each(gt.get(0).className.split(/\s+/),function(e,t){0===t.indexOf(d)&&gt.removeClass(t)}),e(g+", "+L).each(function(){X.scrollOverflowHandler&&X.scrollOverflowHandler.remove(e(this)),e(this).removeClass(D+" "+f)}),Xe(Tt),Tt.find(S+", "+B+", "+z).each(function(){e(this).replaceWith(this.childNodes)}),Tt.css({"-webkit-transition":"none",transition:"none"}),mt.scrollTop(0);var t=[m,P,F];e.each(t,function(t,n){e("."+n).removeClass(n)})}()},yt.shared={afterRenderActions:de},X.css3&&(X.css3=function(){var e,o=n.createElement("p"),i={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};n.body.insertBefore(o,null);for(var s in i)o.style[s]!==a&&(o.style[s]="translate3d(1px,1px,1px)",e=t.getComputedStyle(o).getPropertyValue(i[s]));return n.body.removeChild(o),e!==a&&e.length>0&&"none"!==e}()),X.scrollBar=X.scrollBar||X.hybrid,function(){var t=Tt.find(X.sectionSelector);X.anchors.length||(X.anchors=t.filter("[data-anchor]").map(function(){return e(this).data("anchor").toString()}).get()),X.navigationTooltips.length||(X.navigationTooltips=t.filter("[data-tooltip]").map(function(){return e(this).data("tooltip").toString()}).get())}(),Tt.css({height:"100%",position:"relative"}),Tt.addClass(i),e("html").addClass(u),At=Y.height(),Tt.removeClass(c),Tt.find(X.sectionSelector).addClass(m),Tt.find(X.slideSelector).addClass(P),e(g).each(function(t){var n=e(this),o=n.find(L),a=o.length;!function(t,n){n||0!==e(y).length||t.addClass(f),St=e(y),t.css("height",At+"px"),X.paddingTop&&t.css("padding-top",X.paddingTop),X.paddingBottom&&t.css("padding-bottom",X.paddingBottom),void 0!==X.sectionsColor[n]&&t.css("background-color",X.sectionsColor[n]),void 0!==X.anchors[n]&&t.attr("data-anchor",X.anchors[n])}(n,t),function(t,n){void 0!==X.anchors[n]&&t.hasClass(f)&&Ke(X.anchors[n],n),X.menu&&X.css3&&e(X.menu).closest(s).length&&e(X.menu).appendTo(gt)}(n,t),a>0?function(t,n,o){var a=100*o,i=100/o;n.wrapAll('<div class="'+F+'" />'),n.parent().wrap('<div class="'+R+'" />'),t.find(B).css("width",a+"%"),o>1&&(X.controlArrows&&function(e){e.find(z).after('<div class="'+W+'"></div><div class="'+G+'"></div>'),"#fff"!=X.controlArrowColor&&(e.find(N).css("border-color","transparent transparent transparent "+X.controlArrowColor),e.find($).css("border-color","transparent "+X.controlArrowColor+" transparent transparent")),X.loopHorizontal||e.find($).hide()}(t),X.slidesNavigation&&function(e,t){e.append('<div class="'+j+'"><ul></ul></div>');var n=e.find(H);n.addClass(X.slidesNavPosition);for(var o=0;o<t;o++)n.find("ul").append('<li><a href="#"><span></span></a></li>');n.css("margin-left","-"+n.width()/2+"px"),n.find("li").first().find("a").addClass(f)}(t,o)),n.each(function(t){e(this).css("width",i+"%"),X.verticalCentered&&Qe(e(this))});var s=t.find(O);s.length&&(0!==e(y).index(g)||0===e(y).index(g)&&0!==s.index())?ct(s,"internal"):n.eq(0).addClass(f)}(n,o,a):X.verticalCentered&&Qe(n)}),X.fixedElements&&X.css3&&e(X.fixedElements).appendTo(gt),X.navigation&&function(){gt.append('<div id="'+M+'"><ul></ul></div>');var t=e(T);t.addClass(function(){return X.showActiveTooltip?E+" "+X.navigationPosition:X.navigationPosition});for(var n=0;n<e(g).length;n++){var o="";X.anchors.length&&(o=X.anchors[n]);var a='<li><a href="#'+o+'"><span></span></a>',i=X.navigationTooltips[n];void 0!==i&&""!==i&&(a+='<div class="'+A+" "+X.navigationPosition+'">'+i+"</div>"),a+="</li>",t.find("ul").append(a)}e(T).css("margin-top","-"+e(T).height()/2+"px"),e(T).find("li").eq(e(y).index(g)).find("a").addClass(f)}(),Tt.find('iframe[src*="youtube.com/embed/"]').each(function(){!function(e,t){var n=e.attr("src");e.attr("src",n+(/\?/.test(n)?"&":"?")+t)}(e(this),"enablejsapi=1")}),X.scrollOverflow?Rt=X.scrollOverflowHandler.init(X):de(),te(!0),K(X.autoScrolling,"internal"),Ye(),rt(),"complete"===n.readyState&&Le(),Y.on("load",Le),Y.on("scroll",fe).on("hashchange",Oe).blur(Ve).resize(Ne),U.keydown(ze).keyup(Be).on("click touchstart",T+" a",_e).on("click touchstart",V,qe).on("click",I,Fe),e(g).on("click touchstart",_,He),X.normalScrollElements&&(U.on("mouseenter touchstart",X.normalScrollElements,function(){te(!1)}),U.on("mouseleave touchend",X.normalScrollElements,function(){te(!0)})));var Wt=!1,$t=0,Gt=0,Nt=0,Yt=0,Ut=0,Xt=(new Date).getTime(),Kt=0,Zt=0,Qt=At}}});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),Animate=function(){function e(){_classCallCheck(this,e),this.gradientInterval,this.params={load:{selector:"mainMask",beginStep:-2e3,finishStep:1e3,step:50},main:{selector:"mainMask",beginStep:-2900,finishStep:1e3,step:50,time:2500},mobile:{selector:"mainMobileMask",beginStep:-700,finishStep:400,step:25,time:3e3}}}return _createClass(e,[{key:"animateTransform",value:function(e,t,n,o){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"X",i=document.getElementById(e);requestAnimationFrame(function e(){var s="X"===a?t:"0, "+t;t+=o,i.setAttribute("transform","translate("+s+")"),t===n?cancelAnimationFrame(e):requestAnimationFrame(e)})}},{key:"startAnimation",value:function(){this.animateTransform("first-fill",100,-5,-5,"Y"),this.animateTransform("second-fill",-200,10,10,"Y"),this.animateTransform("third-fill",-100,5,5,"Y"),this.animateTransform("fourth-fill",200,-10,-10,"Y")}},{key:"initGradient",value:function(e){this.animateTransform(this.params[e].selector,this.params[e].beginStep,this.params[e].finishStep,this.params[e].step)}},{key:"initGradientInterval",value:function(e){var t=this;this.gradientInterval=setInterval(function(){t.initGradient(e)},this.params[e].time)}},{key:"clearGradientInterval",value:function(){clearInterval(this.gradientInterval)}}]),e}(),Validate=function(){function e(){_classCallCheck(this,e),this.emailParams={}}return _createClass(e,[{key:"checkValidField",value:function(e){this.pattern=new RegExp(e.pattern),this.result="email-field"===e.id?this.pattern.exec(e.value.toLowerCase()):this.pattern.exec(e.value),this.checkEmptyField(e),!this.result||"message-field"===e.id&&e.value.length<50?this.setErrorClass(e):(this.clearErrors(e),this.emailParams[e.name]=e.value)}},{key:"setErrorClass",value:function(e){e.parentElement.classList.add("error"),e.validFieldCount=!1}},{key:"clearErrors",value:function(e){e.parentElement.classList.remove("error"),e.validFieldCount=!0}},{key:"checkEmptyField",value:function(e){this.blockClassList=e.parentElement.classList,e.value?this.blockClassList.add("not-empty"):this.blockClassList.remove("not-empty")}},{key:"sendForm",value:function(){var e=this,t=$("#form .field");this.validFieldsCount=0,t.each(function(t,n){e.checkValidField(n),""!==n.value&&n.validFieldCount?e.validFieldsCount+=1:e.validFieldsCount-=1}),this.validFieldsCount===t.length&&_sendForm.send(this.emailParams)}}]),e}(),Plugin=function(){function e(){_classCallCheck(this,e),this.statePluginWorking}return _createClass(e,[{key:"init",value:function(){this.statePluginWorking=!0,$("#fullpage").fullpage({navigation:!0,navigationPosition:"right",navigationTooltips:["Home","About","Contact Us"],showActiveTooltip:!0,scrollingSpeed:1e3,easingcss3:"none",fadingEffect:!1,afterRender:function(){animate.startAnimation(),animate.initGradientInterval("main")}})}},{key:"destroy",value:function(){this.statePluginWorking=!1,$.fn.fullpage.destroy("all")}}]),e}(),WindowResize=function(){function e(){_classCallCheck(this,e),this.resizePoint=767}return _createClass(e,[{key:"init",value:function(){$(".loader").remove(),$("body").removeClass("loading"),document.documentElement.clientWidth>this.resizePoint&&!plugin.statePluginWorking?this.desktopView():document.documentElement.clientWidth<=this.resizePoint&&(animate.clearGradientInterval(),animate.initGradientInterval("mobile"),plugin.statePluginWorking&&this.mobileView())}},{key:"desktopView",value:function(){animate.clearGradientInterval(),$(".anchor").removeAttr("name"),plugin.init()}},{key:"mobileView",value:function(){plugin.destroy(),$("#section2 .anchor").attr("name","AboutUs"),$("#section3 .anchor").attr("name","ContactUS")}}]),e}(),SendForm=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"send",value:function(e){var t={to:"insurancerevenuetest@gmail.com",url:"https://api:key-af9370a96ee53df27a764555aacb37f4@api.mailgun.net/v3/sandboxb17b077be1ce4b0caf2433578761d938.mailgun.org/messages",method:"POST",subject:"Contact Us Message",text:"Name: "+e.name+" \nEmail: "+e.email+" \nPhone Number: "+e.phone+" \nMessage: "+e.message,from:"From Ivan <Ivan@sandboxb17b077be1ce4b0caf2433578761d938.mailgun.org>"};this.success(),console.log(t,"params for send"),$.ajax(t).done(function(e){console.log(e,"response after send")})}},{key:"success",value:function(){$("#form").addClass("invisible"),$(".success-message").addClass("active")}}]),e}(),Menu=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"checkSate",value:function(){$(".open-menu").length?$(".menu-wrap").removeClass("open-menu"):$(".menu-wrap").addClass("open-menu")}}]),e}(),animate=new Animate,validate=new Validate,plugin=new Plugin,windowResize=new WindowResize,menu=new Menu,_sendForm=new SendForm;$(document).ready(function(){setTimeout(function(){animate.startAnimation(),animate.initGradient("load")},300),setTimeout(function(){windowResize.init()},2e3),$("#phone-field").mask("### ###",{translation:{"#":{pattern:/a-zA-Z/,recursive:!0}}});var e=document.getElementById("form");e.addEventListener("focus",function(e){validate.clearErrors(e.target)},!0),e.addEventListener("blur",function(e){validate.checkEmptyField(e.target)},!0),$(".menu-wrap").click(function(){menu.checkSate()}),$("#send-button").click(function(e){e.preventDefault(),validate.sendForm()})}),$(window).resize(function(){return windowResize.init()});_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],e):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=e(require("jquery")):e(t||n)}(function(e){var t=function(t,n,o){var a={invalid:[],getCaret:function(){try{var e,n=0,o=t.get(0),i=document.selection,s=o.selectionStart;return i&&-1===navigator.appVersion.indexOf("MSIE 10")?((e=i.createRange()).moveStart("character",-a.val().length),n=e.text.length):(s||"0"===s)&&(n=s),n}catch(e){}},setCaret:function(e){try{if(t.is(":focus")){var n,o=t.get(0);o.setSelectionRange?o.setSelectionRange(e,e):((n=o.createTextRange()).collapse(!0),n.moveEnd("character",e),n.moveStart("character",e),n.select())}}catch(e){}},events:function(){t.on("keydown.mask",function(e){t.data("mask-keycode",e.keyCode||e.which),t.data("mask-previus-value",t.val()),t.data("mask-previus-caret-pos",a.getCaret()),a.maskDigitPosMapOld=a.maskDigitPosMap}).on(e.jMaskGlobals.useInput?"input.mask":"keyup.mask",a.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){t.keydown().keyup()},100)}).on("change.mask",function(){t.data("changed",!0)}).on("blur.mask",function(){r===a.val()||t.data("changed")||t.trigger("change"),t.data("changed",!1)}).on("blur.mask",function(){r=a.val()}).on("focus.mask",function(t){!0===o.selectOnFocus&&e(t.target).select()}).on("focusout.mask",function(){o.clearIfNotMatch&&!i.test(a.val())&&a.val("")})},getRegexMask:function(){for(var e,t,o,a,i,r,l=[],c=0;c<n.length;c++)(e=s.translation[n.charAt(c)])?(t=e.pattern.toString().replace(/.{1}$|^.{1}/g,""),o=e.optional,(a=e.recursive)?(l.push(n.charAt(c)),i={digit:n.charAt(c),pattern:t}):l.push(o||a?t+"?":t)):l.push(n.charAt(c).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return r=l.join(""),i&&(r=r.replace(new RegExp("("+i.digit+"(.*"+i.digit+")?)"),"($1)?").replace(new RegExp(i.digit,"g"),i.pattern)),new RegExp(r)},destroyEvents:function(){t.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(e){var n,o=t.is("input")?"val":"text";return arguments.length>0?(t[o]()!==e&&t[o](e),n=t):n=t[o](),n},calculateCaretPosition:function(){var e=t.data("mask-previus-value")||"",n=a.getMasked(),o=a.getCaret();if(e!==n){var i=t.data("mask-previus-caret-pos")||0,s=n.length,r=e.length,l=0,c=0,u=0,d=0,f=0;for(f=o;f<s&&a.maskDigitPosMap[f];f++)c++;for(f=o-1;f>=0&&a.maskDigitPosMap[f];f--)l++;for(f=o-1;f>=0;f--)a.maskDigitPosMap[f]&&u++;for(f=i-1;f>=0;f--)a.maskDigitPosMapOld[f]&&d++;if(o>r)o=10*s;else if(i>=o&&i!==r){if(!a.maskDigitPosMapOld[o]){var h=o;o-=d-u,o-=l,a.maskDigitPosMap[o]&&(o=h)}}else o>i&&(o+=u-d,o+=c)}return o},behaviour:function(n){n=n||window.event,a.invalid=[];var o=t.data("mask-keycode");if(-1===e.inArray(o,s.byPassKeys)){var i=a.getMasked(),r=a.getCaret();return setTimeout(function(){a.setCaret(a.calculateCaretPosition())},10),a.val(i),a.setCaret(r),a.callbacks(n)}},getMasked:function(e,t){var i,r,l=[],c=void 0===t?a.val():t+"",u=0,d=n.length,f=0,h=c.length,v=1,p="push",m=-1,g=0,y=[];o.reverse?(p="unshift",v=-1,i=0,u=d-1,f=h-1,r=function(){return u>-1&&f>-1}):(i=d-1,r=function(){return u<d&&f<h});for(var k;r();){var w=n.charAt(u),b=c.charAt(f),S=s.translation[w];S?(b.match(S.pattern)?(l[p](b),S.recursive&&(-1===m?m=u:u===i&&(u=m-v),i===m&&(u-=v)),u+=v):b===k?(g--,k=void 0):S.optional?(u+=v,f-=v):S.fallback?(l[p](S.fallback),u+=v,f-=v):a.invalid.push({p:f,v:b,e:S.pattern}),f+=v):(e||l[p](w),b===w?(y.push(f),f+=v):(k=w,y.push(f+g),g++),u+=v)}var C=n.charAt(i);d!==h+1||s.translation[C]||l.push(C);var x=l.join("");return a.mapMaskdigitPositions(x,y,h),x},mapMaskdigitPositions:function(e,t,n){var i=o.reverse?e.length-n:0;a.maskDigitPosMap={};for(var s=0;s<t.length;s++)a.maskDigitPosMap[t[s]+i]=1},callbacks:function(e){var i=a.val(),s=i!==r,l=[i,e,t,o],c=function(e,t,n){"function"==typeof o[e]&&t&&o[e].apply(this,n)};c("onChange",!0===s,l),c("onKeyPress",!0===s,l),c("onComplete",i.length===n.length,l),c("onInvalid",a.invalid.length>0,[i,e,t,a.invalid,o])}};t=e(t);var i,s=this,r=a.val();n="function"==typeof n?n(a.val(),void 0,t,o):n,s.mask=n,s.options=o,s.remove=function(){var e=a.getCaret();return a.destroyEvents(),a.val(s.getCleanVal()),a.setCaret(e),t},s.getCleanVal=function(){return a.getMasked(!0)},s.getMaskedVal=function(e){return a.getMasked(!1,e)},s.init=function(r){if(r=r||!1,o=o||{},s.clearIfNotMatch=e.jMaskGlobals.clearIfNotMatch,s.byPassKeys=e.jMaskGlobals.byPassKeys,s.translation=e.extend({},e.jMaskGlobals.translation,o.translation),s=e.extend(!0,{},s,o),i=a.getRegexMask(),r)a.events(),a.val(a.getMasked());else{o.placeholder&&t.attr("placeholder",o.placeholder),t.data("mask")&&t.attr("autocomplete","off");for(var l=0,c=!0;l<n.length;l++){var u=s.translation[n.charAt(l)];if(u&&u.recursive){c=!1;break}}c&&t.attr("maxlength",n.length),a.destroyEvents(),a.events();var d=a.getCaret();a.val(a.getMasked()),a.setCaret(d)}},s.init(!t.is("input"))};e.maskWatchers={};var n=function(){var n=e(this),a={},i=n.attr("data-mask");if(n.attr("data-mask-reverse")&&(a.reverse=!0),n.attr("data-mask-clearifnotmatch")&&(a.clearIfNotMatch=!0),"true"===n.attr("data-mask-selectonfocus")&&(a.selectOnFocus=!0),o(n,i,a))return n.data("mask",new t(this,i,a))},o=function(t,n,o){o=o||{};var a=e(t).data("mask"),i=JSON.stringify,s=e(t).val()||e(t).text();try{return"function"==typeof n&&(n=n(s)),"object"!==(void 0===a?"undefined":_typeof(a))||i(a.options)!==i(o)||a.mask!==n}catch(e){}};e.fn.mask=function(n,a){a=a||{};var i=this.selector,s=e.jMaskGlobals,r=s.watchInterval,l=a.watchInputs||s.watchInputs,c=function(){if(o(this,n,a))return e(this).data("mask",new t(this,n,a))};return e(this).each(c),i&&""!==i&&l&&(clearInterval(e.maskWatchers[i]),e.maskWatchers[i]=setInterval(function(){e(document).find(i).each(c)},r)),this},e.fn.masked=function(e){return this.data("mask").getMaskedVal(e)},e.fn.unmask=function(){return clearInterval(e.maskWatchers[this.selector]),delete e.maskWatchers[this.selector],this.each(function(){var t=e(this).data("mask");t&&t.remove().removeData("mask")})},e.fn.cleanVal=function(){return this.data("mask").getCleanVal()},e.applyDataMask=function(t){((t=t||e.jMaskGlobals.maskElements)instanceof e?t:e(t)).filter(e.jMaskGlobals.dataMaskAttr).each(n)};var a={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(e){var t,n=document.createElement("div");return e="on"+e,(t=e in n)||(n.setAttribute(e,"return;"),t="function"==typeof n[e]),n=null,t}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};e.jMaskGlobals=e.jMaskGlobals||{},(a=e.jMaskGlobals=e.extend(!0,{},a,e.jMaskGlobals)).dataMask&&e.applyDataMask(),setInterval(function(){e.jMaskGlobals.watchDataMask&&e.applyDataMask()},a.watchInterval)},window.jQuery,window.Zepto);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
